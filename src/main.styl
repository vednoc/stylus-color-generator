@import 'base.styl'

$showNumbers = 0
$dgb = ''

FG = #e6e6e6
BG = #232629
SA = 0%

to_hsla(input, $c = {}) {
    $c.hue = unquote(split('deg', '%s' % ceil(hue(input), 2))[0])
    $c.saturation = ceil(saturation(input), 2)
    $c.lightness = ceil(lightness(input), 2)
    s('hsla(%s,%s,%s,1)', $c.hue, $c.saturation, $c.lightness)
}

C = {
    v1: { hue: 000deg, }, //red
    v2: { hue: 030deg, }, //orange
    v3: { hue: 060deg, }, //yellow
    v4: { hue: 120deg, }, //green
    v5: { hue: 180deg, }, //cyan
    v6: { hue: 210deg, }, //blue
    v7: { hue: 270deg, }, //magenta
    v8: { hue: 300deg, }, //violet
    v9: { hue: 000deg, }, //gray
}

for c, i in C {
    $hue = C[c].hue
    // $dbg = 'k: ' + c + ' ::: i: ' + i + ' ::: val: ' + $hue
    for num in 0..9 {
        $res = ''
        if (c != 'v9') {
            $res = hsl(C[c].hue - num * 1.5, 88 - num * 3, (16 + (num + 1) * 8/1.5))
            // $res = tint($res, num * 2)
        } else {
            $res = hsl(C[c].hue, 0, (num + 2) * 8)
            // $res = shade($res, num * 2)
        }
        $res = darken($res, SA)
        $res = to_hsla($res)
        $dbg = c + '-' + num + ' ::: ' + $res
        define(c + num, s('var(--%s-%s)', unquote(c), num), global)
        define(c + '-' + num, $res, global)
    }
}

for color in (v0 v1 v2 v3 v4 v5 v6 v7 v8 v9) {
    for position in 0..9 {
        ul.colors._{ color } .c{ position } {
            background: color + '-' + position
            //{ s('--%s-%s', color, position)}: color + position
        }
    }
}

.debug::before {
    content: $dbg
    font-style: italic
}

for i in 0..9 {
    .debug-{ i }::before {
        content: '' + i + ' -> ' + (v4- + i)
        font-family: monospace
        font-size: 1rem
    }
}

unless($showNumbers) {
    ul.colors li[class] {
        color: transparent !important
        text-shadow: none !important
        box-shadow: none !important
    }
}

html {
    color: FG
    background: BG
}

@import 'base.styl'

$showNumbers = 0
$dbg = ''

FG = #e6e6e6
BG = #232629
SA = 0%

// {{{ Mixins
to_hsla(input, $c = {}) {
    $c.hue = unquote(split('deg', '%s' % ceil(hue(input), 2))[0])
    $c.saturation = ceil(saturation(input), 2)
    $c.lightness = ceil(lightness(input), 2)
    s('hsla(%s,%s,%s,1)', $c.hue, $c.saturation, $c.lightness)
}

prettyHSLA(x) {
    xs = replace('[hsla\(\)]', '', x)
    xs = split(',', xs)
    $t = convert(xs[3])
    $h = base-convert(convert(xs[0]), 10, 3)
    $s = base-convert(convert(xs[1]), 10, 3)
    $l = base-convert(convert(xs[2]), 10, 3)
    return s('hue: %s, sat: %s%, lig: %s%, alpha: %s', $h, $s, $l, $t)
}
// }}}

// {{{ Color generator
C = {
    v0: { ac: #7289da, },
    v1: { hue: 000deg, }, //red
    v2: { hue: 030deg, }, //orange
    v3: { hue: 060deg, }, //yellow
    v4: { hue: 120deg, }, //green
    v5: { hue: 180deg, }, //cyan
    v6: { hue: 210deg, }, //blue
    v7: { hue: 270deg, }, //magenta
    v8: { hue: 300deg, }, //violet
    v9: { hue: 000deg, }, //gray
}

for c, i in C {
    $dbg += ' c: ' + c + ' i: ' + i
    // if c == v9 { $dbg += '' + c + i }

    for num in 0..9 {
        /// Case for accent colors.
        if (c == v0) {
            $color = darken(C[c].ac, (100% - (-18 + (num+5) * 7.5)))
            $color = to_hsla($color)
        }

        /// Case for gray colors.
        else if (c == v9) {
            $color = hsl(C[c].hue, 0%, 50%)
            $color = darken($color, (100% - (-18 + (num+3) * 12)))
            $color = to_hsla($color)
        }

        /// Case for RGB colors.
        else {
            $hue = C[c].hue
            $color = hsl($hue, 70%, 70%)
            $color = darken($color, (100% - (num+2) * 7.5))
            $color = lightness($color, lightness($color) + (num))
            $color = to_hsla($color)
        }

        /// Expose color variables.
        define(c + num, s('var(--%s-%s)', unquote(c), num), global)
        define(c + '-' + num, $color, global)
    }
}

/*
for c, i in C {
    $hue = C[c].hue
    // $dbg = 'k: ' + c + ' ::: i: ' + i + ' ::: val: ' + $hue
    for num in 0..9 {
        $res = ''
        if (c == 'v0') {
            $offset = (num < 2) ? 0.8 : 1.6
            $res = darken(C[c].ac, 100% - (num + $offset) * 12)
        } else if (c != 'v9') {
            $h = C[c].hue + num / 2
            $s = 100 - num * 8
            $offset = (num < 2) ? 0.8 : 1.6
            $l = 5 + (num + $offset) * 5
            $res = hsl($h, $s, $l)
        } else {
            $res = hsl(C[c].hue, 0, (num + 2) * 8)
        }
        $res = darken($res, SA)
        $res = to_hsla($res)
        $dbg = c + '-' + num + ' ::: ' + $res
        define(c + num, s('var(--%s-%s)', unquote(c), num), global)
        define(c + '-' + num, $res, global)
    }
}
*/

for color in (v0 v1 v2 v3 v4 v5 v6 v7 v8 v9) {
    for position in 0..9 {
        ul.colors._{ color } .c{ position } {
            background: color + '-' + position
            //{ s('--%s-%s', color, position)}: color + position
        }
    }
}
// }}}

// {{{ Debug
.debug {
    max-width: 496px

    &::before {
        content: $dbg
        font-style: italic
    }
}

for i in 0..9 {
    .debug-{ i }::before {
        content: '' + prettyHSLA(v1- + i)
        font-family: monospace
        font-size: 1rem
    }
}

unless($showNumbers) {
    ul.colors li[class] {
        color: transparent !important
        text-shadow: none !important
        box-shadow: none !important
    }
}

html {
    color: FG
    background: BG
}
// }}}

$selected = 'old-colors'
$showNumbers = 0
$inspect = v0
$dbg = ''

// {{{ Mixins
to_hsla(input, $c = {}) {
    $c.hue = unquote(split('deg', '%s' % ceil(hue(input), 2))[0])
    $c.saturation = ceil(saturation(input), 2)
    $c.lightness = ceil(lightness(input), 2)
    s('hsla(%s,%s,%s,1)', $c.hue, $c.saturation, $c.lightness)
}

prettyHSLA(x) {
    xs = replace('[hsla\(\)]', '', x)
    xs = split(',', xs)
    $t = convert(xs[3])
    $h = base-convert(convert(xs[0]), 10, 3)
    $s = base-convert(convert(xs[1]), 10, 3)
    $l = base-convert(convert(xs[2]), 10, 3)
    return s('hue: %s, sat: %s%, lig: %s%, alpha: %s', $h, $s, $l, $t)
}

expose_colors($c, $i = num, $value = $color) {
    define('' + s('%s%s', $c.key, $i), s('var(--%s-%s)', unquote($c.key), $i), global)
    define('' + s('%s-%s', $c.key, $i), $value, global)
}
// }}}

// {{{ Color generator
// Generator -> Color-schemes.
ColorSchemes = {
    'custom':               { BG: #000000, FG: #ffffff, AC: #66ff66 }
    'old-colors':           { BG: #1f232a, FG: #eeeeee, AC: #7289da }
    'new-colors':           { BG: #292929, FG: #e6e6e6, AC: #d47d3f }
    'github-dark':          { BG: #181818, FG: #e6e6e6, AC: #4f8cc9 }
    'breeze-dark':          { BG: #232629, FG: #eff0f1, AC: #3daee9 }
    'solarized-dark':       { BG: #002b36, FG: #fdf6e3, AC: #268bd2 }
    'solarized-light':      { BG: #fdf6e3, FG: #002b36, AC: #268bd2 }
}

// Generator -> Active color-scheme.
for color-scheme in ColorSchemes {
    if (color-scheme == $selected) {
        define('BG', ColorSchemes[color-scheme].BG, global)
        define('FG', ColorSchemes[color-scheme].FG, global)
        define('AC', ColorSchemes[color-scheme].AC, global)
        debug {
            selected: s('%s, %s', color-scheme, $selected)
            exposed: s('bg(%s), fg(%s), ac(%s)', BG, FG, AC)
        }
    }
}

// Generator -> Color values/hues.
// NOTE: List with anonymous hashes.
colors = (
    { key: bg, color:   BG } \
    { key: fg, color:   FG } \
    { key: v0, color:   AC } \
    { key: v1, hue:   0deg } \
    { key: v2, hue:  30deg } \
    { key: v3, hue:  60deg } \
    { key: v4, hue: 120deg } \
    { key: v5, hue: 180deg } \
    { key: v6, hue: 210deg } \
    { key: v7, hue: 270deg } \
    { key: v8, hue: 300deg } \
    { key: v9, hue:   0deg } \
)

// Alias colors.
$bg = colors[0]
$fg = colors[1]
// $dbg += '%s; %s; :::' % (($bg) ($fg))

// Generate background colors.
for num in 0..5 {
    $color = $bg.color
    if num == 1 {} // Skip base BG color.
    else if num == 0 { $color = darken($color, 10%) }
    else { $color = lighten($color, (num+2) * num/2%) }
    $color = to_hsla($color)

    expose_colors($bg)
}

// Generate foreground colors.
for num in 0..5 {
    $color = $fg.color
    if num == 1 {} // Skip base FG color.
    else if num == 0 { $color = lighten($color, 10%) }
    else { $color = darken($color, (num + num/1.25) * 6%) }

    $color = desaturate($color, 80%)
    $color = to_hsla($color)
    // $dbg += '--- FG: ' + $color

    expose_colors($fg)
}

for c, i in colors[2..length(colors)] {
    // $dbg += s('::: c: %s, i: %s; ', c, i )
    // if c.key == v9 { $dbg += s('::: c: %s, i: %s; ', c, i ) }
    $sel  = colors[i+2]
    $dbg += ' ' + $sel

    for num in 0..9 {
        /// Case for accent colors.
        if ($sel.key == v0) {
            $color = darken($sel.color, (100% - (num+3) * 7.5))
            $color = lightness($color, lightness($color) + num)
        }

        /// Case for gray colors.
        else if ($sel.key == v9) {
            $color = hsl($sel.hue, 0%, 50%)
            $color = darken($color, (100% - (num+2) * 17))
        }

        /// Case for RGB colors.
        else {
            $hue   = $sel.hue
            $color = hsl($hue, 70%, 70%)
            $color = darken($color, (100% - (num+2) * 7.5))
            $color = lightness($color, lightness($color) + num)
        }

        /// Convert to HSLA format.
        $color = to_hsla($color)

        expose_colors($sel)
    }
}

/// Generate CSS variables.
colors = (bg fg v0 v1 v2 v3 v4 v5 v6 v7 v8 v9)
:root {
    for color in colors[0..1] {
        for tone in 0..5 {
            { '--%s-%s' % ((color) (tone)) }: color + '-' + tone
        }
    }
    for color in colors[2..length(colors)] {
        for tone in 0..9 {
            { '--%s-%s' % ((color) (tone)) }: color + '-' + tone
        }
    }
}

/// Generate list item styles.
for color in colors[0..1] {
    for tone in 0..5 {
        ul.colors.{ color } { '.%s%s' % ((color) (tone)) } {
            // background-color: color + '-' + tone
            // { s('--%s-%s', color, tone)}: color + '-' + tone
            background-color: 'var(--%s-%s)' % ((color) (tone))
        }
    }
}
for color in colors[2..length(colors)] {
    for tone in 0..9 {
        ul.colors.{ color } { '.%s%s' % ((color) (tone)) } {
            // background-color: color + '-' + tone
            // { s('--%s-%s', color, tone)}: color + '-' + tone
            background-color: 'var(--%s-%s)' % ((color) (tone))
        }
    }
}
// }}}

// {{{ Debug
.debug {
    max-width: 496px

    &::before {
        content: $dbg
        font-style: italic
    }
}

for i in 0..9 {
    .debug-{ i }::before {
        content: '' + prettyHSLA($inspect + '-' + i)
        font-family: monospace
        font-size: 1rem
    }
}

unless($showNumbers) {
    ul.colors li[class] {
        color: transparent !important
        text-shadow: none !important
        box-shadow: none !important
    }
}

@import 'base.styl'
// }}}
